// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/wx/service/v1/wx_sys.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WxSysClient is the client API for WxSys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxSysClient interface {
	AuthServer(ctx context.Context, in *AuthServerReq, opts ...grpc.CallOption) (*AuthServerResp, error)
	DispatchMsg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*StringReply, error)
	GetAccessToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenReply, error)
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*CommonReply, error)
}

type wxSysClient struct {
	cc grpc.ClientConnInterface
}

func NewWxSysClient(cc grpc.ClientConnInterface) WxSysClient {
	return &wxSysClient{cc}
}

func (c *wxSysClient) AuthServer(ctx context.Context, in *AuthServerReq, opts ...grpc.CallOption) (*AuthServerResp, error) {
	out := new(AuthServerResp)
	err := c.cc.Invoke(ctx, "/wx.service.v1.WxSys/AuthServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxSysClient) DispatchMsg(ctx context.Context, in *MsgReq, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/wx.service.v1.WxSys/DispatchMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxSysClient) GetAccessToken(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenReply, error) {
	out := new(TokenReply)
	err := c.cc.Invoke(ctx, "/wx.service.v1.WxSys/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxSysClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/wx.service.v1.WxSys/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxSysServer is the server API for WxSys service.
// All implementations must embed UnimplementedWxSysServer
// for forward compatibility
type WxSysServer interface {
	AuthServer(context.Context, *AuthServerReq) (*AuthServerResp, error)
	DispatchMsg(context.Context, *MsgReq) (*StringReply, error)
	GetAccessToken(context.Context, *TokenReq) (*TokenReply, error)
	CreateMenu(context.Context, *Menu) (*CommonReply, error)
	mustEmbedUnimplementedWxSysServer()
}

// UnimplementedWxSysServer must be embedded to have forward compatible implementations.
type UnimplementedWxSysServer struct {
}

func (UnimplementedWxSysServer) AuthServer(context.Context, *AuthServerReq) (*AuthServerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthServer not implemented")
}
func (UnimplementedWxSysServer) DispatchMsg(context.Context, *MsgReq) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchMsg not implemented")
}
func (UnimplementedWxSysServer) GetAccessToken(context.Context, *TokenReq) (*TokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedWxSysServer) CreateMenu(context.Context, *Menu) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedWxSysServer) mustEmbedUnimplementedWxSysServer() {}

// UnsafeWxSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxSysServer will
// result in compilation errors.
type UnsafeWxSysServer interface {
	mustEmbedUnimplementedWxSysServer()
}

func RegisterWxSysServer(s grpc.ServiceRegistrar, srv WxSysServer) {
	s.RegisterService(&WxSys_ServiceDesc, srv)
}

func _WxSys_AuthServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxSysServer).AuthServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wx.service.v1.WxSys/AuthServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxSysServer).AuthServer(ctx, req.(*AuthServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxSys_DispatchMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxSysServer).DispatchMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wx.service.v1.WxSys/DispatchMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxSysServer).DispatchMsg(ctx, req.(*MsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxSys_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxSysServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wx.service.v1.WxSys/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxSysServer).GetAccessToken(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WxSys_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxSysServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wx.service.v1.WxSys/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxSysServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

// WxSys_ServiceDesc is the grpc.ServiceDesc for WxSys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WxSys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wx.service.v1.WxSys",
	HandlerType: (*WxSysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthServer",
			Handler:    _WxSys_AuthServer_Handler,
		},
		{
			MethodName: "DispatchMsg",
			Handler:    _WxSys_DispatchMsg_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _WxSys_GetAccessToken_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _WxSys_CreateMenu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wx/service/v1/wx_sys.proto",
}
